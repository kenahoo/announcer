<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/announcer-app/src/App.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/announcer-app/src/App.js" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import './App.css';&#10;&#10;// Initial roster data&#10;const initialHomeRoster = [&#10;  { number: 1, firstName: 'Alice', lastName: 'Smith', position: 'GK', scores: '' },&#10;  { number: 2, firstName: 'Beth', lastName: 'Johnson', position: 'DF', scores: '' },&#10;  { number: 3, firstName: 'Cara', lastName: 'Williams', position: 'DF', scores: '' },&#10;  { number: 4, firstName: 'Dana', lastName: 'Brown', position: 'DF', scores: '' },&#10;  { number: 5, firstName: 'Eva', lastName: 'Jones', position: 'DF', scores: '' },&#10;  { number: 6, firstName: 'Fay', lastName: 'Miller', position: 'MF', scores: '' },&#10;  { number: 7, firstName: 'Gina', lastName: 'Wilson', position: 'MF', scores: '' },&#10;  { number: 8, firstName: 'Holly', lastName: 'Moore', position: 'MF', scores: '' },&#10;  { number: 9, firstName: 'Ivy', lastName: 'Taylor', position: 'MF', scores: '' },&#10;  { number: 10, firstName: 'Jade', lastName: 'Anderson', position: 'FW', scores: '' },&#10;  { number: 11, firstName: 'Kate', lastName: 'Thomas', position: 'FW', scores: '' },&#10;  { number: 12, firstName: 'Lara', lastName: 'Jackson', position: 'FW', scores: '' },&#10;  { number: 13, firstName: 'Mia', lastName: 'White', position: 'DF', scores: '' },&#10;  { number: 14, firstName: 'Nina', lastName: 'Harris', position: 'MF', scores: '' },&#10;  { number: 15, firstName: 'Olga', lastName: 'Martin', position: 'DF', scores: '' },&#10;  { number: 16, firstName: 'Paula', lastName: 'Thompson', position: 'MF', scores: '' },&#10;  { number: 17, firstName: 'Quinn', lastName: 'Garcia', position: 'FW', scores: '' },&#10;  { number: 18, firstName: 'Rita', lastName: 'Martinez', position: 'DF', scores: '' },&#10;  { number: 19, firstName: 'Sara', lastName: 'Robinson', position: 'MF', scores: '' },&#10;  { number: 20, firstName: 'Tina', lastName: 'Clark', position: 'FW', scores: '' }&#10;];&#10;&#10;const initialOpponentRoster = [&#10;  { number: 1, firstName: 'Aaron', lastName: 'King', position: 'GK', scores: '' },&#10;  { number: 2, firstName: 'Ben', lastName: 'Wright', position: 'DF', scores: '' },&#10;  { number: 3, firstName: 'Caleb', lastName: 'Lopez', position: 'DF', scores: '' },&#10;  { number: 4, firstName: 'Dylan', lastName: 'Hill', position: 'DF', scores: '' },&#10;  { number: 5, firstName: 'Eli', lastName: 'Scott', position: 'DF', scores: '' },&#10;  { number: 6, firstName: 'Finn', lastName: 'Green', position: 'MF', scores: '' },&#10;  { number: 7, firstName: 'Gabe', lastName: 'Adams', position: 'MF', scores: '' },&#10;  { number: 8, firstName: 'Henry', lastName: 'Nelson', position: 'MF', scores: '' },&#10;  { number: 9, firstName: 'Isaac', lastName: 'Baker', position: 'MF', scores: '' },&#10;  { number: 10, firstName: 'Jack', lastName: 'Carter', position: 'FW', scores: '' },&#10;  { number: 11, firstName: 'Kyle', lastName: 'Mitchell', position: 'FW', scores: '' },&#10;  { number: 12, firstName: 'Liam', lastName: 'Perez', position: 'FW', scores: '' },&#10;  { number: 13, firstName: 'Mason', lastName: 'Roberts', position: 'DF', scores: '' },&#10;  { number: 14, firstName: 'Noah', lastName: 'Turner', position: 'MF', scores: '' },&#10;  { number: 15, firstName: 'Owen', lastName: 'Phillips', position: 'DF', scores: '' },&#10;  { number: 16, firstName: 'Paul', lastName: 'Campbell', position: 'MF', scores: '' },&#10;  { number: 17, firstName: 'Quentin', lastName: 'Parker', position: 'FW', scores: '' },&#10;  { number: 18, firstName: 'Ryan', lastName: 'Evans', position: 'DF', scores: '' },&#10;  { number: 19, firstName: 'Sam', lastName: 'Edwards', position: 'MF', scores: '' },&#10;  { number: 20, firstName: 'Tom', lastName: 'Collins', position: 'FW', scores: '' }&#10;];&#10;&#10;function Roster({ teamName, onTeamNameChange, score, onScoreChange, players, status, toggleStatus, handlePlayerChange, handleRemovePlayer, handleAddPlayer }) {&#10;  return (&#10;    &lt;div className=&quot;roster&quot;&gt;&#10;      &lt;div className=&quot;team-header&quot; style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '16px', gap: '32px' }}&gt;&#10;        &lt;input&#10;          type=&quot;text&quot;&#10;          value={teamName}&#10;          onChange={onTeamNameChange}&#10;          className=&quot;team-name-input&quot;&#10;          style={{ fontSize: '1.5em', fontWeight: 'bold', textAlign: 'center', flex: 1, minWidth: '120px', border: 'none', background: 'transparent', color: '#222' }}&#10;          placeholder=&quot;Team Name&quot;&#10;        /&gt;&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={score}&#10;          onChange={onScoreChange}&#10;          className=&quot;team-score-input&quot;&#10;          min={0}&#10;          style={{ fontSize: '2.5em', fontWeight: 'bold', width: '110px', textAlign: 'center', borderRadius: '8px', border: '2px solid #888', background: '#fff', color: '#222', margin: '0 16px' }}&#10;          aria-label=&quot;Team Score&quot;&#10;        /&gt;&#10;      &lt;/div&gt;&#10;      &lt;table className=&quot;roster-table&quot;&gt;&#10;        &lt;thead&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt;Number&lt;/th&gt;&#10;            &lt;th&gt;First Name&lt;/th&gt;&#10;            &lt;th&gt;Last Name&lt;/th&gt;&#10;            &lt;th&gt;Position&lt;/th&gt;&#10;            &lt;th&gt;Notes&lt;/th&gt;&#10;            &lt;th&gt;&lt;/th&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;          {players.sort((a, b) =&gt; a.number - b.number).map((player, idx) =&gt; (&#10;            &lt;tr&#10;              key={player.number}&#10;              style={{ backgroundColor: status[player.number] ? 'green' : '#872d2d', color: 'white', cursor: 'pointer' }}&#10;              onClick={e =&gt; {&#10;                if (e.target.tagName !== 'INPUT') toggleStatus(player.number);&#10;              }}&#10;            &gt;&#10;              &lt;td&gt;{player.number}&lt;/td&gt;&#10;              &lt;td&gt;{player.firstName}&lt;/td&gt;&#10;              &lt;td&gt;{player.lastName}&lt;/td&gt;&#10;              &lt;td&gt;{player.position}&lt;/td&gt;&#10;              &lt;td&gt;&#10;                &lt;input&#10;                  style={{ width: '60px', color: 'black', background: 'transparent', border: 'none', borderRadius: '0', padding: '2px 4px', textAlign: 'center' }}&#10;                  value={player.scores}&#10;                  onChange={e =&gt; handleScoreChange(idx, e.target.value)}&#10;                  style={{ width: '100%', color: 'black', background: 'white', borderRadius: '4px', border: '1px solid #ccc', padding: '2px 6px' }}&#10;                  onClick={e =&gt; e.stopPropagation()}&#10;                /&gt;&#10;              &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;                  style={{ width: '100%', color: 'black', background: 'transparent', border: 'none', borderRadius: '0', padding: '2px 4px' }}&#10;        &lt;/tbody&gt;&#10;      &lt;/table&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function App() {&#10;                  style={{ width: '100%', color: 'black', background: 'transparent', border: 'none', borderRadius: '0', padding: '2px 4px' }}&#10;  const [homeStatus, setHomeStatus] = useState({});&#10;  const [opponentStatus, setOpponentStatus] = useState({});&#10;  const [homeRoster, setHomeRoster] = useState(initialHomeRoster);&#10;  const [opponentRoster, setOpponentRoster] = useState(initialOpponentRoster);&#10;  const [homeTeamName, setHomeTeamName] = useState('Home Team');&#10;  const [opponentTeamName, setOpponentTeamName] = useState('Opponent');&#10;  const [homeScore, setHomeScore] = useState(0);&#10;                  style={{ width: '60px', color: 'black', background: 'transparent', border: 'none', borderRadius: '0', padding: '2px 4px', textAlign: 'center' }}&#10;&#10;  const toggleHomeStatus = (num) =&gt; {&#10;    setHomeStatus(prev =&gt; ({ ...prev, [num]: !prev[num] }));&#10;  };&#10;  const toggleOpponentStatus = (num) =&gt; {&#10;    setOpponentStatus(prev =&gt; ({ ...prev, [num]: !prev[num] }));&#10;  };&#10;                  style={{ width: '100%', color: 'black', background: 'transparent', border: 'none', borderRadius: '0', padding: '2px 6px' }}&#10;  const handleHomeScoreChange = (idx, value) =&gt; {&#10;    setHomeRoster(prev =&gt; {&#10;      const updated = [...prev];&#10;      updated[idx] = { ...updated[idx], scores: value };&#10;      return updated;&#10;    });&#10;  };&#10;                  style={{ background: 'transparent', color: '#fff', border: 'none', borderRadius: '0', padding: '2px 8px', cursor: 'pointer', fontWeight: 'bold' }}&#10;    setOpponentRoster(prev =&gt; {&#10;      const updated = [...prev];&#10;      return updated;&#10;    });&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;App&quot; style={{ display: 'flex', justifyContent: 'space-around', padding: '32px' }}&gt;&#10;      &lt;Roster&#10;        teamName={homeTeamName}&#10;        onTeamNameChange={e =&gt; setHomeTeamName(e.target.value)}&#10;        score={homeScore}&#10;        onScoreChange={e =&gt; setHomeScore(Number(e.target.value))}&#10;        players={homeRoster}&#10;        status={homeStatus}&#10;        toggleStatus={toggleHomeStatus}&#10;        handleScoreChange={handleHomeScoreChange}&#10;        isHome={true}&#10;      /&gt;&#10;      &lt;Roster&#10;        teamName={opponentTeamName}&#10;        onTeamNameChange={e =&gt; setOpponentTeamName(e.target.value)}&#10;        score={opponentScore}&#10;        onScoreChange={e =&gt; setOpponentScore(Number(e.target.value))}&#10;        players={opponentRoster}&#10;        status={opponentStatus}&#10;        toggleStatus={toggleOpponentStatus}&#10;        handleScoreChange={handleOpponentScoreChange}&#10;        isHome={false}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default App;&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import './App.css';&#10;&#10;// Initial roster data&#10;const initialHomeRoster = [&#10;  { number: 1, firstName: 'Alice', lastName: 'Smith', position: 'GK', scores: '' },&#10;  { number: 2, firstName: 'Beth', lastName: 'Johnson', position: 'DF', scores: '' },&#10;  { number: 3, firstName: 'Cara', lastName: 'Williams', position: 'DF', scores: '' },&#10;  { number: 4, firstName: 'Dana', lastName: 'Brown', position: 'DF', scores: '' },&#10;  { number: 5, firstName: 'Eva', lastName: 'Jones', position: 'DF', scores: '' },&#10;  { number: 6, firstName: 'Fay', lastName: 'Miller', position: 'MF', scores: '' },&#10;  { number: 7, firstName: 'Gina', lastName: 'Wilson', position: 'MF', scores: '' },&#10;  { number: 8, firstName: 'Holly', lastName: 'Moore', position: 'MF', scores: '' },&#10;  { number: 9, firstName: 'Ivy', lastName: 'Taylor', position: 'MF', scores: '' },&#10;  { number: 10, firstName: 'Jade', lastName: 'Anderson', position: 'FW', scores: '' },&#10;  { number: 11, firstName: 'Kate', lastName: 'Thomas', position: 'FW', scores: '' },&#10;  { number: 12, firstName: 'Lara', lastName: 'Jackson', position: 'FW', scores: '' },&#10;  { number: 13, firstName: 'Mia', lastName: 'White', position: 'DF', scores: '' },&#10;  { number: 14, firstName: 'Nina', lastName: 'Harris', position: 'MF', scores: '' },&#10;  { number: 15, firstName: 'Olga', lastName: 'Martin', position: 'DF', scores: '' },&#10;  { number: 16, firstName: 'Paula', lastName: 'Thompson', position: 'MF', scores: '' },&#10;  { number: 17, firstName: 'Quinn', lastName: 'Garcia', position: 'FW', scores: '' },&#10;  { number: 18, firstName: 'Rita', lastName: 'Martinez', position: 'DF', scores: '' },&#10;  { number: 19, firstName: 'Sara', lastName: 'Robinson', position: 'MF', scores: '' },&#10;  { number: 20, firstName: 'Tina', lastName: 'Clark', position: 'FW', scores: '' }&#10;];&#10;&#10;const initialOpponentRoster = [&#10;  { number: 1, firstName: 'Aaron', lastName: 'King', position: 'GK', scores: '' },&#10;  { number: 2, firstName: 'Ben', lastName: 'Wright', position: 'DF', scores: '' },&#10;  { number: 3, firstName: 'Caleb', lastName: 'Lopez', position: 'DF', scores: '' },&#10;  { number: 4, firstName: 'Dylan', lastName: 'Hill', position: 'DF', scores: '' },&#10;  { number: 5, firstName: 'Eli', lastName: 'Scott', position: 'DF', scores: '' },&#10;  { number: 6, firstName: 'Finn', lastName: 'Green', position: 'MF', scores: '' },&#10;  { number: 7, firstName: 'Gabe', lastName: 'Adams', position: 'MF', scores: '' },&#10;  { number: 8, firstName: 'Henry', lastName: 'Nelson', position: 'MF', scores: '' },&#10;  { number: 9, firstName: 'Isaac', lastName: 'Baker', position: 'MF', scores: '' },&#10;  { number: 10, firstName: 'Jack', lastName: 'Carter', position: 'FW', scores: '' },&#10;  { number: 11, firstName: 'Kyle', lastName: 'Mitchell', position: 'FW', scores: '' },&#10;  { number: 12, firstName: 'Liam', lastName: 'Perez', position: 'FW', scores: '' },&#10;  { number: 13, firstName: 'Mason', lastName: 'Roberts', position: 'DF', scores: '' },&#10;  { number: 14, firstName: 'Noah', lastName: 'Turner', position: 'MF', scores: '' },&#10;  { number: 15, firstName: 'Owen', lastName: 'Phillips', position: 'DF', scores: '' },&#10;  { number: 16, firstName: 'Paul', lastName: 'Campbell', position: 'MF', scores: '' },&#10;  { number: 17, firstName: 'Quentin', lastName: 'Parker', position: 'FW', scores: '' },&#10;  { number: 18, firstName: 'Ryan', lastName: 'Evans', position: 'DF', scores: '' },&#10;  { number: 19, firstName: 'Sam', lastName: 'Edwards', position: 'MF', scores: '' },&#10;  { number: 20, firstName: 'Tom', lastName: 'Collins', position: 'FW', scores: '' }&#10;];&#10;&#10;function Roster({ teamName, onTeamNameChange, score, onScoreChange, players, status, toggleStatus, handlePlayerChange, handleRemovePlayer, handleAddPlayer }) {&#10;  return (&#10;    &lt;div className=&quot;roster&quot;&gt;&#10;      &lt;div className=&quot;team-header&quot; style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '16px', gap: '32px' }}&gt;&#10;        &lt;input&#10;          type=&quot;text&quot;&#10;          value={teamName}&#10;          onChange={onTeamNameChange}&#10;          className=&quot;team-name-input&quot;&#10;          style={{ fontSize: '1.5em', fontWeight: 'bold', textAlign: 'center', flex: 1, minWidth: '120px', border: 'none', background: 'transparent', color: '#222' }}&#10;          placeholder=&quot;Team Name&quot;&#10;        /&gt;&#10;        &lt;input&#10;          type=&quot;number&quot;&#10;          value={score}&#10;          onChange={onScoreChange}&#10;          className=&quot;team-score-input&quot;&#10;          min={0}&#10;          style={{ fontSize: '2.5em', fontWeight: 'bold', width: '110px', textAlign: 'center', borderRadius: '8px', border: '2px solid #888', background: '#fff', color: '#222', margin: '0 16px' }}&#10;          aria-label=&quot;Team Score&quot;&#10;        /&gt;&#10;      &lt;/div&gt;&#10;      &lt;table className=&quot;roster-table&quot;&gt;&#10;        &lt;thead&gt;&#10;          &lt;tr&gt;&#10;            &lt;th&gt;Number&lt;/th&gt;&#10;            &lt;th&gt;First Name&lt;/th&gt;&#10;            &lt;th&gt;Last Name&lt;/th&gt;&#10;            &lt;th&gt;Position&lt;/th&gt;&#10;            &lt;th&gt;Notes&lt;/th&gt;&#10;            &lt;th&gt;&lt;/th&gt;&#10;          &lt;/tr&gt;&#10;        &lt;/thead&gt;&#10;        &lt;tbody&gt;&#10;          {players.sort((a, b) =&gt; a.number - b.number).map((player, idx) =&gt; (&#10;            &lt;tr&#10;              key={player.number}&#10;              style={{ backgroundColor: status[player.number] ? 'green' : '#872d2d', color: 'white', cursor: 'pointer' }}&#10;              onClick={e =&gt; {&#10;                if (e.target.tagName !== 'INPUT' &amp;&amp; e.target.tagName !== 'BUTTON') toggleStatus(player.number);&#10;              }}&#10;            &gt;&#10;              &lt;td&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={player.number}&#10;                  onChange={e =&gt; handlePlayerChange(idx, 'number', e.target.value)}&#10;                  style={{ width: '60px', color: 'black', background: 'transparent', border: 'none', borderRadius: '0', padding: '2px 4px', textAlign: 'center' }}&#10;                /&gt;&#10;              &lt;/td&gt;&#10;              &lt;td&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={player.firstName}&#10;                  onChange={e =&gt; handlePlayerChange(idx, 'firstName', e.target.value)}&#10;                  style={{ width: '100%', color: 'black', background: 'transparent', border: 'none', borderRadius: '0', padding: '2px 4px' }}&#10;                /&gt;&#10;              &lt;/td&gt;&#10;              &lt;td&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={player.lastName}&#10;                  onChange={e =&gt; handlePlayerChange(idx, 'lastName', e.target.value)}&#10;                  style={{ width: '100%', color: 'black', background: 'transparent', border: 'none', borderRadius: '0', padding: '2px 4px' }}&#10;                /&gt;&#10;              &lt;/td&gt;&#10;              &lt;td&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={player.position}&#10;                  onChange={e =&gt; handlePlayerChange(idx, 'position', e.target.value)}&#10;                  style={{ width: '60px', color: 'black', background: 'transparent', border: 'none', borderRadius: '0', padding: '2px 4px', textAlign: 'center' }}&#10;                /&gt;&#10;              &lt;/td&gt;&#10;              &lt;td&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={player.scores}&#10;                  onChange={e =&gt; handlePlayerChange(idx, 'scores', e.target.value)}&#10;                  style={{ width: '100%', color: 'black', background: 'transparent', border: 'none', borderRadius: '0', padding: '2px 6px' }}&#10;                  onClick={e =&gt; e.stopPropagation()}&#10;                /&gt;&#10;              &lt;/td&gt;&#10;              &lt;td&gt;&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  onClick={e =&gt; { e.stopPropagation(); handleRemovePlayer(idx); }}&#10;                  style={{ background: 'transparent', color: '#fff', border: 'none', borderRadius: '0', padding: '2px 8px', cursor: 'pointer', fontWeight: 'bold' }}&#10;                  aria-label=&quot;Remove Player&quot;&#10;                &gt;&#10;                  ×&#10;                &lt;/button&gt;&#10;              &lt;/td&gt;&#10;            &lt;/tr&gt;&#10;          ))}&#10;        &lt;/tbody&gt;&#10;      &lt;/table&gt;&#10;      &lt;div style={{ textAlign: 'right', marginTop: '8px' }}&gt;&#10;        &lt;button&#10;          type=&quot;button&quot;&#10;          onClick={handleAddPlayer}&#10;          style={{ background: '#eaeaea', color: '#222', border: '1px solid #ccc', borderRadius: '4px', padding: '4px 12px', cursor: 'pointer', fontWeight: 'bold' }}&#10;        &gt;&#10;          Add Player&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;function App() {&#10;  const [homeStatus, setHomeStatus] = useState({});&#10;  const [opponentStatus, setOpponentStatus] = useState({});&#10;  const [homeRoster, setHomeRoster] = useState(initialHomeRoster);&#10;  const [opponentRoster, setOpponentRoster] = useState(initialOpponentRoster);&#10;  const [homeTeamName, setHomeTeamName] = useState('Home Team');&#10;  const [opponentTeamName, setOpponentTeamName] = useState('Opponent');&#10;  const [homeScore, setHomeScore] = useState(0);&#10;  const [opponentScore, setOpponentScore] = useState(0);&#10;&#10;  const toggleHomeStatus = (num) =&gt; {&#10;    setHomeStatus(prev =&gt; ({ ...prev, [num]: !prev[num] }));&#10;  };&#10;  const toggleOpponentStatus = (num) =&gt; {&#10;    setOpponentStatus(prev =&gt; ({ ...prev, [num]: !prev[num] }));&#10;  };&#10;&#10;  // Generalized player change handler&#10;  const handleHomePlayerChange = (idx, field, value) =&gt; {&#10;    setHomeRoster(prev =&gt; {&#10;      const updated = [...prev];&#10;      updated[idx] = { ...updated[idx], [field]: field === 'number' ? Number(value) : value };&#10;      return updated;&#10;    });&#10;  };&#10;  const handleOpponentPlayerChange = (idx, field, value) =&gt; {&#10;    setOpponentRoster(prev =&gt; {&#10;      const updated = [...prev];&#10;      updated[idx] = { ...updated[idx], [field]: field === 'number' ? Number(value) : value };&#10;      return updated;&#10;    });&#10;  };&#10;  // Remove player&#10;  const handleRemoveHomePlayer = (idx) =&gt; {&#10;    setHomeRoster(prev =&gt; prev.filter((_, i) =&gt; i !== idx));&#10;  };&#10;  const handleRemoveOpponentPlayer = (idx) =&gt; {&#10;    setOpponentRoster(prev =&gt; prev.filter((_, i) =&gt; i !== idx));&#10;  };&#10;  // Add player&#10;  const handleAddHomePlayer = () =&gt; {&#10;    setHomeRoster(prev =&gt; {&#10;      const nextNumber = prev.length &gt; 0 ? Math.max(...prev.map(p =&gt; p.number)) + 1 : 1;&#10;      return [...prev, { number: nextNumber, firstName: '', lastName: '', position: '', scores: '' }];&#10;    });&#10;  };&#10;  const handleAddOpponentPlayer = () =&gt; {&#10;    setOpponentRoster(prev =&gt; {&#10;      const nextNumber = prev.length &gt; 0 ? Math.max(...prev.map(p =&gt; p.number)) + 1 : 1;&#10;      return [...prev, { number: nextNumber, firstName: '', lastName: '', position: '', scores: '' }];&#10;    });&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;App&quot; style={{ display: 'flex', justifyContent: 'space-around', padding: '32px' }}&gt;&#10;      &lt;Roster&#10;        teamName={homeTeamName}&#10;        onTeamNameChange={e =&gt; setHomeTeamName(e.target.value)}&#10;        score={homeScore}&#10;        onScoreChange={e =&gt; setHomeScore(Number(e.target.value))}&#10;        players={homeRoster}&#10;        status={homeStatus}&#10;        toggleStatus={toggleHomeStatus}&#10;        handlePlayerChange={handleHomePlayerChange}&#10;        handleRemovePlayer={handleRemoveHomePlayer}&#10;        handleAddPlayer={handleAddHomePlayer}&#10;      /&gt;&#10;      &lt;Roster&#10;        teamName={opponentTeamName}&#10;        onTeamNameChange={e =&gt; setOpponentTeamName(e.target.value)}&#10;        score={opponentScore}&#10;        onScoreChange={e =&gt; setOpponentScore(Number(e.target.value))}&#10;        players={opponentRoster}&#10;        status={opponentStatus}&#10;        toggleStatus={toggleOpponentStatus}&#10;        handlePlayerChange={handleOpponentPlayerChange}&#10;        handleRemovePlayer={handleRemoveOpponentPlayer}&#10;        handleAddPlayer={handleAddOpponentPlayer}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default App;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>